from _typeshed import Incomplete
from collections.abc import Iterator
from typing import NamedTuple, Any, Optional, IO

class Resolution(NamedTuple):
    x: Incomplete
    y: Incomplete
    unit_is_meter: Incomplete

class Error(Exception): ...
class FormatError(Error): ...
class ProtocolError(Error): ...
class ChunkError(FormatError): ...
class Default: ...

class Writer:
    width: Incomplete
    height: Incomplete
    transparent: Incomplete
    background: Incomplete
    gamma: Incomplete
    greyscale: Incomplete
    alpha: Incomplete
    colormap: Incomplete
    bitdepth: Incomplete
    compression: Incomplete
    chunk_limit: Incomplete
    interlace: Incomplete
    palette: Incomplete
    x_pixels_per_unit: Incomplete
    y_pixels_per_unit: Incomplete
    unit_is_meter: Incomplete
    color_type: Incomplete
    color_planes: Incomplete
    planes: Incomplete
    psize: Incomplete
    def __init__(self, width: Incomplete | None = ..., height: Incomplete | None = ..., size: Incomplete | None = ..., greyscale=..., alpha: bool = ..., bitdepth: int = ..., palette: Incomplete | None = ..., transparent: Incomplete | None = ..., background: Incomplete | None = ..., gamma: Incomplete | None = ..., compression: Incomplete | None = ..., interlace: bool = ..., planes: Incomplete | None = ..., colormap: Incomplete | None = ..., maxval: Incomplete | None = ..., chunk_limit=..., x_pixels_per_unit: Incomplete | None = ..., y_pixels_per_unit: Incomplete | None = ..., unit_is_meter: bool = ...) -> None: ...
    def write(self, outfile, rows): ...
    def write_passes(self, outfile, rows): ...
    def write_packed(self, outfile, rows): ...
    def write_preamble(self, outfile) -> None: ...
    def write_array(self, outfile, pixels): ...
    def array_scanlines(self, pixels) -> Iterator[Incomplete]: ...
    def array_scanlines_interlace(self, pixels) -> Iterator[Incomplete]: ...

def write_chunks(out, chunks) -> None: ...
def from_array(a, mode: Incomplete | None = ..., info=...): ...
fromarray = from_array

class Image:
    rows: Incomplete
    info: Incomplete
    def __init__(self, rows, info) -> None: ...
    def save(self, file) -> None: ...
    def stream(self) -> None: ...
    def write(self, file) -> None: ...

ReaderResult = tuple[int, int, Iterator[list[int]], Any]

class Reader:
    signature: Incomplete
    transparent: Incomplete
    atchunk: Incomplete
    file: Incomplete
    def __init__(self, _guess: Incomplete | None = None, filename: Optional[str] = None, file: Optional[IO[bytes]] = None, bytes: Optional[bytes | bytearray] = None) -> None: ...
    def chunk(self, lenient: bool = ...): ...
    def chunks(self) -> Iterator[Incomplete]: ...
    def undo_filter(self, filter_type: Any, scanline: bytes, previous: Optional[Iterator[int]]) -> bytes: ...
    def validate_signature(self) -> None: ...
    def preamble(self, lenient: bool = False) -> None: ...
    def process_chunk(self, lenient: bool = False) -> None: ...
    def read(self, lenient: bool = False) -> ReaderResult: ...
    def read_flat(self) -> ReaderResult: ...
    def palette(self, alpha: str = 'natural') -> Iterator[tuple[int, ...]]: ...
    def asDirect(self) -> ReaderResult: ...
    def asRGB8(self) -> ReaderResult: ...
    def asRGBA8(self) -> ReaderResult: ...
    def asRGB(self) -> ReaderResult: ...
    def asRGBA(self) -> ReaderResult: ...
